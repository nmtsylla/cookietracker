require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/websites", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Website. As you add validations to Website, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    h = Hash.new
    h['url'] =  Faker::Internet.url
    h['scan_schedule'] = :weekly
    h['weekly_scan_day'] = (0..5).to_a.sample
    h['added_date'] = Faker::Date.in_date_period(month: 1)
    h['customer_id'] = (1..50).to_a.sample
    h
  }

  let(:invalid_attributes) {
    h = Hash.new
    h['url'] =  nil
    h['scan_schedule'] = 4
    h['weekly_scan_day'] = 9
    h
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # WebsitesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {'Content-Type': 'appplication/json'}
  }

  describe "GET /index" do
    let!(:website) {FactoryBot.create_list(:website, 20)}

    before { get websites_url, headers: valid_headers, as: :json }

    it "renders a successful response" do
      expect(response).to be_successful
    end

    it 'returns all websites' do
      expect(JSON.parse(response.body).size).to eq(20)
    end

  end

  describe "GET /show" do
    let!(:website) { create(:website) }
    before { get website_url(website), as: :json }

    it "renders a successful response" do
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post websites_url,
             params: { website: valid_attributes }
      end
      it "creates a new Website" do
        expect {
          post websites_url,
               params: { website: valid_attributes }
        }.to change(Website, :count).by(1)
      end

      it "renders a JSON response with the new website" do

        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it { expect(JSON.parse(response.body)['active']).to eq(true) }
    end

    context "with invalid parameters" do
      it "does not create a new Website" do
        expect {
          post websites_url,
               params: { website: invalid_attributes }
        }.to change(Website, :count).by(0)
      end

      it "renders a JSON response with errors for the new website" do
        post websites_url,
             params: { website: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let!(:new_attributes) {
        FactoryBot.attributes_for(:website)
      }
      let!(:website) { create(:website) }

      before {
        new_attributes[:weekly_scan_day] = :weekly
        patch website_url(website),
                     params: { website: new_attributes }
      }

      it "updates the requested website" do
        expect(response).to have_http_status(:ok)
        expect(JSON.parse(response.body)['weekly_scan_day']).to eq(0)
      end

      it "renders a JSON response with the website" do
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let!(:website) { create(:website) }
      let!(:new_attributes) {
        FactoryBot.attributes_for(:website)
      }
      before {new_attributes['weekly_scan_day'] = 10}
      it "renders a JSON response with errors for the website" do

        patch website_url(website),
              params: { website: new_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:website) { create(:website) }
    it "destroys the requested website" do
      expect {
        delete website_url(website), headers: valid_headers, as: :json
      }.to change(Website, :count).by(-1)
    end
  end
end
